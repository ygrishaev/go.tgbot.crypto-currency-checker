package response

import (
	"fmt"
	"go.tgbot.crypto-currency-checker/internal/entities"
	"strconv"
	"time"
)

func Render(curr *entities.CryptoCurrency, time time.Time) string {
	var result string
	price, _ := strconv.ParseFloat(curr.PriceUsd, 64)
	changePercent, _ := strconv.ParseFloat(curr.ChangePercent24Hr, 64)

	result = fmt.Sprintf("–¶–µ–Ω–∞ %s –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê\n\n", curr.Name)
	result = result + fmt.Sprintf("1 %s = %.4f USD üí∞\n", curr.Symbol, price)

	if changePercent >= 0 {
		result = result + "(+"
	} else {
		result = result + "("
	}
	result = result + fmt.Sprintf("%.2f%%Û†Ä• –∑–∞ 24 —á–∞—Å–∞)\n\n", changePercent)
	result = result + fmt.Sprintf("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: %v\n\n", time.Format("2006-01-02 15:04"))

	if curr.Explorer != "" {
		result = result + fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–µ—Ç–µ: %s", curr.Explorer)
	}

	return result
}

func StartMessage() string {
	message := fmt.Sprintf(
		"–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:\n\n/%s\n/%s\n/%s\n/%s\n/%s\n/%s\n\n",
		entities.CryptoCurrencyBitcoin,
		entities.CryptoCurrencyEthereum,
		entities.CryptoCurrencyTether,
		entities.CryptoCurrencySolana,
		entities.CryptoCurrencyCardano,
		entities.CryptoCurrencyDogecoin,
	)

	return message + fmt.Sprintf("–õ–∏–±–æ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –º–æ–Ω–µ—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /Random")
}
